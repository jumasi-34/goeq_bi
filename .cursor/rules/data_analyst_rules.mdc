---
description: 
globs: 
alwaysApply: true
---

# 📊 데이터 분석, 시각화, 그리고 Streamlit 개발 가이드라인

## 👤 전문 분야 및 기술 스택
이 가이드는 **pandas**, **plotly.graph_objects (go)**, **streamlit**을 활용한 데이터 분석, 대시보드 시각화, 웹 애플리케이션 개발에 능숙한 개발자를 위한 지침입니다.

---

## ✅ 핵심 원칙

- **간결하고 기술적인 코드**를 작성하세요.
- **가독성**, **재현성**, **명확성**을 최우선으로 합니다.
- 필요 시 **함수형 프로그래밍**을 사용하고, **불필요한 클래스 사용을 피합니다.**
- **벡터화 연산**을 우선시하여 성능을 확보합니다.
- **의미 있는 변수명**을 사용하여 코드 내용을 명확히 합니다.
- **PEP 8** 스타일 가이드를 따르세요.

---

## 🧮 데이터 분석 및 처리 규칙

- `pandas`를 활용해 데이터 로딩, 전처리, 집계를 수행하세요.
- `.pipe()`, `.assign()` 등 **method chaining**을 권장합니다.
- **명시적인 선택**을 위해 `.loc[]`, `.iloc[]`을 사용하세요.
- `.groupby()`로 효율적인 집계 로직을 작성합니다.

---

## 📊 Plotly 시각화 규칙 (`go` 사용 고정)

- 모든 차트는 **`plotly.graph_objects` (`go`)**만 사용합니다.
- 시각화는 반드시:
  - **제목**, **축 라벨**, **범례**를 포함해야 합니다.
  - **색약 친화적인 팔레트**를 고려해야 합니다.
  - **영어**로 작성되어야 합니다.
- **모듈화된 재사용 가능한 시각화 함수**를 작성하세요.
- `plotly.express`와 혼용하지 마세요. **`go.Figure`로 통일합니다.**

---

## ⚠️ 에러 처리 및 데이터 검증

- 분석 전에 **결측치, 중복 데이터** 등을 검토하세요.
- 파일 로딩, 파싱 등에는 **try-except**를 사용하세요.
- 분석 또는 출력 전에는 **데이터 타입 및 값 범위**를 검증하세요.

---

## 🚀 성능 최적화

- `for` 루프 대신 **pandas/numpy 벡터화 연산**을 사용하세요.
- 범주형 문자열은 `category` 타입으로 변환하여 메모리 절약 (`astype("category")`).
- `@st.cache_data` 또는 `@st.cache_resource`로 Streamlit의 성능을 향상하세요.
- `%timeit`, `cProfile` 등을 통해 병목을 파악하고 최적화하세요.

---

## 🌐 Streamlit 개발 지침

- Streamlit 페이지는 `_04_pages/` 디렉토리에 구성합니다.
- 모든 UI 요소는 **영어로 표시**합니다.
- `st.plotly_chart()` 사용 시 `go.Figure`를 적용하고, **고유 key**를 부여하세요.
- 스타일을 하드코딩하지 마세요.

---

## 🧪 테스트 및 배포

- 테스트 스크립트는 `_09_test/` 폴더에 작성합니다.
- 전처리 및 시각화 함수는 **더미 데이터**로 항상 테스트합니다.
- 출력 결과의 **형태, 컬럼 타입, 비즈니스 로직**을 검증한 후 배포하세요.
- `st.selectbox("Test Case")` 등을 활용해 수동 테스트 페이지를 구현합니다.

---

## 🧾 문서화 및 협업 규칙

1. 각 스크립트 또는 노트북 상단에 **요약 및 데이터 출처**를 명시하세요.
2. **markdown 셀**이나 **docstring**으로 가정 및 처리 과정을 설명하세요.
3. Git 커밋 메시지는 다음 패턴을 따릅니다:

   ```
   [feature] added monthly yield chart using plotly go
   [bugfix] fixed missing value handling in plant grouping
   [docs] updated API usage note for query module
   ```

4. 브랜치 네이밍 규칙:
   - `feature/`, `bugfix/`, `hotfix/`, `docs/` 등

---

## 🔄 폴더 구조 예시 (단순화)

```
_00_database/       # DB 연결 및 DDL  
_01_query/          # SQL 쿼리 및 빌더  
_02_preprocessing/  # 데이터 전처리 로직  
_03_visualization/  # Plotly.go 기반 시각화 함수  
_04_pages/          # Streamlit 페이지  
_05_commons/        # 공통 유틸 및 설정  
_06_assets/         # 정적 자산 (로고, 폰트 등)  
_07_docs/           # 내부 문서 및 가이드  
_08_automation/     # 자동화 스크립트 (cron 등)  
_09_test/           # 테스트 코드 및 템플릿  
temp/               # 임시 파일 (정기적 정리 필요)  
```

---

## 📦 주요 라이브러리

- `pandas`
- `numpy`
- `plotly.graph_objects`
- `streamlit`

---

## 📌 참고 사항

- **BI 시스템의 모든 출력은 영어**로 작성해야 합니다.
- **모든 그래프는 `go.Figure`로 기본 구현**되며, **layout과 trace는 분리**하여 정의해야 합니다.
